<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.idatrix.resource.datareport.dao.DataUploadDAO">
  <resultMap id="BaseResultMap"
    type="com.idatrix.resource.datareport.po.DataUploadPO">
    <id column="id" property="id" jdbcType="BIGINT"/>
    <result column="resource_id" property="resourceId" jdbcType="BIGINT"/>
    <result column="status" property="status" jdbcType="VARCHAR"/>
    <result column="data_batch" property="dataBatch" jdbcType="VARCHAR"/>
    <result column="data_type" property="dataType" jdbcType="VARCHAR"/>
    <result column="import_time" property="importTime" javaType="java.util.Date"
      jdbcType="TIMESTAMP"/>
    <result column="import_count" property="importCount" jdbcType="BIGINT"/>
    <result column="insert_count" property="insertCount" jdbcType="BIGINT"/>
    <result column="update_count" property="updateCount" jdbcType="BIGINT"/>
    <result column="fail_count" property="failCount" jdbcType="BIGINT"/>
    <result column="import_task_id" property="importTaskId" jdbcType="VARCHAR"/>
    <result column="task_seq" property="taskSeq" jdbcType="BIGINT"/>
    <result column="subscribe_id" property="subscribeId" jdbcType="VARCHAR"/>
    <result column="exec_id" property="execId" jdbcType="VARCHAR"/>
    <result column="import_errmsg" property="importErrmsg" jdbcType="VARCHAR"/>
    <result column="creator" property="creator" jdbcType="VARCHAR"/>
    <result column="create_time" property="createTime" javaType="java.util.Date"
      jdbcType="TIMESTAMP"/>
    <result column="modifier" property="modifier" jdbcType="VARCHAR"/>
    <result column="modify_time" property="modifyTime" javaType="java.util.Date"
      jdbcType="TIMESTAMP"/>
  </resultMap>

  <resultMap id="SearchResultMap" type="com.idatrix.resource.datareport.po.SearchDataUploadPO">
    <id column="id" property="id" jdbcType="BIGINT"/>
    <result column="import_task_id" property="importTaskId" jdbcType="VARCHAR"/>
    <result column="subscribe_id" property="subscribeId" jdbcType="VARCHAR"/>
    <result column="data_type" property="dataType" jdbcType="VARCHAR"/>
    <result column="code" property="code" jdbcType="VARCHAR"/>
    <result column="name" property="name" jdbcType="VARCHAR"/>
    <result column="file_names" property="fileNames" jdbcType="VARCHAR"/>
    <result column="data_batch" property="dataBatch" jdbcType="VARCHAR"/>
    <result column="create_time" property="createTime" javaType="java.util.Date"
      jdbcType="TIMESTAMP"/>
    <result column="import_time" property="importTime" javaType="java.util.Date"
      jdbcType="TIMESTAMP"/>
    <result column="import_count" property="importCount" jdbcType="BIGINT"/>
    <result column="status" property="status" jdbcType="VARCHAR"/>
  </resultMap>

  <resultMap id="UploadTaskResultMap"
    type="com.idatrix.resource.taskmanage.po.UploadTaskOverviewPO">
    <id column="id" property="id" jdbcType="BIGINT"/>
    <result column="resource_id" property="resourceId" jdbcType="BIGINT"/>
    <result column="task_name" property="taskName" jdbcType="VARCHAR"/>
    <result column="etl_subscribe_id" property="etlSubscribeId" jdbcType="VARCHAR"/>
    <result column="data_batch" property="dataBatch" jdbcType="VARCHAR"/>
    <result column="code" property="code" jdbcType="VARCHAR"/>
    <result column="provide_dept" property="provideDept" jdbcType="VARCHAR"/>
    <result column="task_type" property="taskType" jdbcType="VARCHAR"/>
    <result column="last_start_time" property="lastStartTime" javaType="java.util.Date"
      jdbcType="TIMESTAMP"/>
    <result column="last_end_time" property="lastEndTime" javaType="java.util.Date"
      jdbcType="TIMESTAMP"/>
    <result column="data_count" property="dataCount" jdbcType="BIGINT"/>
    <result column="status" property="status" jdbcType="VARCHAR"/>
    <result column="creator" property="creator" jdbcType="VARCHAR"/>
  </resultMap>

  <resultMap id="TaskInfoResultMap" type="com.idatrix.resource.taskmanage.vo.DescribeInfoVO">
    <id column="month" property="month" jdbcType="VARCHAR"/>
    <result column="task_count" property="taskCount" jdbcType="BIGINT"/>
    <result column="data_count" property="dateCount" jdbcType="BIGINT"/>
  </resultMap>

  <sql id="Base_UploadTask_List">
    rdu.id as id,
    rdu.resource_id as resource_id,
    rdu.import_task_id as task_name,
    rdu.subscribe_id as etl_subscribe_id,
    rdu.data_batch as data_batch,
    rr.code as code,
    rr.dept_name as provide_dept,
    rdu.data_type as task_type,
    rdu.create_time as last_start_time,
    rdu.import_time as last_end_time,
    rdu.import_count as data_count,
    rdu.status as status,
    rdu.creator as creator
  </sql>

  <sql id="Base_Column_List">
    id, resource_id, status, data_batch, data_type, import_time, import_count, insert_count,
    update_count,
    fail_count, import_task_id, task_seq, subscribe_id, exec_id, import_errmsg, creator,
    create_time, modifier,
    modify_time
  </sql>


  <select id="getTaskInfoByMonth" parameterType="java.lang.Long" resultMap="TaskInfoResultMap">
    SELECT
    DATE_FORMAT(create_time, '%Y%m') as month,
    SUM(import_count) as data_count,
    COUNT(id) as task_count
    FROM
    rc_data_upload
    WHERE create_time>DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01') , INTERVAL #{num} MONTH)
    GROUP BY month
    ORDER BY month DESC;
  </select>

  <select id="getTaskCount" resultType="java.lang.Long">
    select
    count(id)
    from
    rc_data_upload
  </select>

  <select id="queryOverview" resultMap="UploadTaskResultMap" parameterType="hashmap">
    select
    <include refid="Base_UploadTask_List"/>
    from
    rc_data_upload rdu inner join rc_resource rr on rdu.resource_id=rr.id
    where 1=1
    <if test="importTaskId!=null">
      and rdu.import_task_id like '${importTaskId}%'
    </if>
    <if test="deptName!=null">
      AND MATCH (rr.`name`, rr.dept_name) AGAINST ('*${deptName}*' IN BOOLEAN MODE)
    </if>
    <if test="dataType!=null">
      and rdu.data_type = #{dataType}
    </if>
    <if test="status!=null">
      and rdu.status = #{status}
    </if>
    order by rdu.create_time desc
  </select>

  <insert id="insertDataUploadRecord"
    parameterType="com.idatrix.resource.datareport.po.DataUploadPO"
    useGeneratedKeys="true" keyProperty="id">
    insert into rc_data_upload (
    resource_id, status, data_batch, data_type, import_time, import_count, insert_count,
    update_count, fail_count,
    import_task_id, task_seq, subscribe_id, exec_id, import_errmsg, creator, create_time, modifier,
    modify_time)
    values (#{resourceId}, #{status}, #{dataBatch}, #{dataType}, #{importTime}, #{importCount},
    #{insertCount},
    #{updateCount}, #{failCount}, #{importTaskId}, #{taskSeq}, #{subscribeId}, #{execId},
    #{importErrmsg},
    #{creator}, #{createTime}, #{modifier}, #{modifyTime})
  </insert>

  <update id="updateDataUploadRecordById"
    parameterType="com.idatrix.resource.datareport.po.DataUploadPO">
    update rc_data_upload
    set id = #{id},
    import_time = #{importTime},
    import_count = #{importCount},
    insert_count = #{insertCount},
    update_count = #{updateCount},
    fail_count = #{failCount},
    subscribe_id = #{subscribeId},
    exec_id = #{execId},
    import_errmsg = #{importErrmsg},
    status = #{status},
    modifier = #{modifier},
    modify_time = #{modifyTime}
    where id = #{id}
  </update>

  <select id="getDataUploadRecordByCondition" resultMap="SearchResultMap" parameterType="hashmap">
    select
    u.id,
    u.import_task_id,
    u.subscribe_id,
    u.data_type,
    r.code,
    r.name,
    u.data_batch,
    u.create_time,
    u.import_time,
    u.import_count,
    u.status,
    (SELECT GROUP_CONCAT(t.pub_file_name) FROM rc_data_upload_detail t
    WHERE t.parent_id = u.`id` GROUP BY t.parent_id) AS file_names
    from rc_data_upload u
    LEFT JOIN rc_resource r
    ON u.resource_id = r.id
    where u.creator = #{creator}
    <if test="name!=null">
      AND MATCH (r.`name`, r.dept_name) AGAINST ('*${name}*' IN BOOLEAN MODE)
    </if>
    <if test="code!=null">
      and r.code like '${code}%'
    </if>
    <if test="status!=null">
      and u.status = #{status}
    </if>
    <if test="pubFileName!=null">
      and exists (select d.parent_id from rc_data_upload_detail d
      where d.parent_id = u.id and d.pub_file_name like '%${pubFileName}')
    </if>
    order by u.create_time desc
  </select>

  <select id="getDataUploadRecordById" resultMap="BaseResultMap"
    parameterType="java.lang.Long">
    select
    <include refid="Base_Column_List"/>
    from rc_data_upload
    where id = #{id}
  </select>

  <select id="getMaxTaskSeq" resultType="java.lang.Long">
    select ifnull(MAX(task_seq), 0) as task_seq
    from rc_data_upload
  </select>

  <select id="getDataUploadRecordByTaskExecId" resultMap="BaseResultMap"
    parameterType="java.lang.String">
    select
    <include refid="Base_Column_List"/>
    from rc_data_upload
    where exec_id = #{execId}
  </select>

  <select id="getWaitImportedDataUploadRecords" resultMap="BaseResultMap"
    parameterType="java.lang.String">
    select
    <include refid="Base_Column_List"/>
    from rc_data_upload
    where status = #{status} order by create_time asc
    LIMIT 1;
  </select>

  <select id="getExistedDataUpLoadRecords" resultMap="BaseResultMap"
    parameterType="hashmap">
    select
    <include refid="Base_Column_List"/>
    from rc_data_upload
    where subscribe_id is not NULL and resource_id = #{resourceId} and creator = #{creator}
    order by create_time desc
    LIMIT 1;
  </select>

  <delete id="deleteDataUploadRecordById" parameterType="java.lang.Long">
    delete from rc_data_upload
    where id = #{id}
  </delete>
</mapper>