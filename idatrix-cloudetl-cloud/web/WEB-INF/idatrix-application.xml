<?xml version='1.0' encoding='UTF-8' ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- 和web无关的配置 -->

	<context:component-scan base-package="com.ys.idatrix.cloudetl.dto" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.deploy" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.service" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.reference" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.repository" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.logger" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.monitor" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.toolkit" />
	<context:component-scan base-package="com.ys.idatrix.cloudetl.ext" />

	
	<context:annotation-config />
	
  	 <!-- spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value  
  	   @Cacheable spring
	             会在其被调用后将返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。<br>
	   @CachePut 标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。<br>
	   @CacheEvict 用来标注在需要清除缓存元素的方法或类上的。<br>
	              <br>
	              eg. <br>
	   @Cacheable(key="'id_'+#id") <br>
	   @CachePut(key="#user.getUserName()") <br>
	   @CacheEvict(key="'id_'+#id") <br> 
	  --> 
     <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">    
         <property name="caches">    
            <set>    
                <!-- 这里可以配置多个redis -->  
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCache">  
                	<constructor-arg > 
                		<value>sampleCache</value>   
                	</constructor-arg>  
                </bean>    
            </set>    
         </property>    
     </bean>   
	
	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->    
    <cache:annotation-driven cache-manager="cacheManager" />
	
	<bean class="com.ys.idatrix.cloudetl.ext.PluginFactory"/>
	
	<bean class="com.ys.idatrix.cloudetl.ext.config.CloudApplicationConfig" />
	<bean class="com.ys.idatrix.cloudetl.ext.config.CloudDubboConfig" />
	<bean class="com.ys.idatrix.cloudetl.ext.config.RedisCacheConfig" />
	
	<!-- spring的属性加载器，加载properties文件中的属性 -->
	<bean id="idatrixProperty" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="2"></property>
		<property name="location">
			<value>file:./config/idatrix.properties</value>
		</property>
		<property name="fileEncoding" value="utf-8" />
	</bean>
	
</beans>