说明：

这是一个前后端分离的项目，安全主要是使用 shiro（原理就是一堆的过滤器链） 来实现的。
采用的是cas认证方式，因为是前后端分离，那么将转发改成 json 数据来处理了。

提示：如果对cas不熟悉可以查看一下资料：
https://www.cnblogs.com/morethink/p/8047711.html


具体功能：
登录认证
权限判断
会话管理


概念：
server：安全系统（服务器）

client：其它子系统（客户端）

会话：每一个新开的浏览器就是一个新的会话。这是唯一的。可以理解为是session


===========server：登录认证，权限认证，记住我，会话并发管理

TokenManager：服务端的令牌管理器（用于通知客户端做：更新缓存时间，登出，清空缓存）

TokenValidateServlet：客户端根据当前令牌访问此 servlet 获取用户信息


===========client：请求server来认证

TokenManager：客户端中的令牌缓存

UserHolder：提供给客户端业务层的一个缓存（让客户端可以在业务层中使用用户信息）


具体实现：

用户登录 -----> 认证成功后会话将会保存在redis中，也会将会话缓存到server缓存本地中（TokenManager）。
                并且将shiro生成的令牌保存在cookie中 -----> 当客户端（子系统）被访问时会被 SSOFilter 过滤器拦截，
                SSOFilter 会将保存在cookie中的令牌拿到，先从客户端缓存中（client.TokenManager）先校验令牌的有效性，
                如果无效再从服务端去校验令牌的有效性。从而进行认证流程。


用户登出 -----> 服务端先本地登出，删除服务端缓存（TokenManager）的会话，再删除redis中的会话缓存。
                然后从配置文件中获取出所有的客户端信息，用http方式让所有的子系统（客户端）进行一个登出操作，清除客户端本地缓存。


校验缓存过期时间 -----> 服务端有一条线程，每隔一分钟执行一次。
                        执行内容：循环服务端本地会话缓存，检查过期时间，并且去获取到所有客户端用户缓存最后的一个活动时间。
                        计算出正确的一个过期时间点。在正确过期时间点里去通知所有的服务端和客户端去删除会话缓存（包含redis）。


SSOUser：服务端根据客户端传过来的令牌获取到的用户信息。


最大的分类：租户
主要是以租户来分类
租户下的部门，租户下的角色，租户下的用户。租户和角色一对多。用户和角色是多对多的，角色和权限多对多。部门和用户是一对多的。
（大多都是crud）
前台根据用户来获取权限来做权限控制（只有安全后台现在做了权限认证，其它子系统中是只做了登录认证）。



提示：
安全模块大多功能都是基于redis的，如果redis挂了，那么整个安全模块也都是不可用的。



排除问题提示：
服务端令牌出现错误，先检查本地缓存，然后在检查redis缓存





http://ip:port/security/member/importAllUserToSsz               将所有的用户同步到神算子中










