##============================== Repository =================================##
#仓库类型 :file/database, 默认 file
idatrix.metadata.reposity.type=file

# ETL仓库根目录 , 如果不填，则默认为web\reposity\
idatrix.metadata.reposity.root=/data/ETL/reposity/

dataStore.upload.file.root.path=/data/ETL/reposity/${user}/dataStore/
templete.upload.file.root.path=/data/ETL/reposity/${user}/upload/
output.server.file.root.path=/data/ETL/reposity/${user}/output/


##=============================== Database settings ==================================##
#是否启用公共数据库
idatrix.database.enable=false
#数据库基本配置
idatrix.database.type=MYSQL
idatrix.database.ip=
idatrix.database.port=3306
idatrix.database.databaseName=
idatrix.database.username=
idatrix.database.password=

#启用数据库连接池
idatrix.database.use.pooling=true
#连接池初始化连接数
idatrix.database.pooling.initialSize=1
#连接池的最大数据库连接数，设为0表示无限制
idatrix.database.pooling.maxActive=50
 #没有人用连接的时候，最大闲置的连接个数，设置为0时，表示没有限制。
idatrix.database.pooling.maxIdle=5
#超时等待时间以毫秒为单位.设置为-1,表示没有限制,不超时
idatrix.database.pooling.maxWait=120000
#指定由连接池所创建的连接的自动提交（auto-commit）状态。  
idatrix.database.pooling.defaultAutoCommit=true
#是否自动回收超时连接
idatrix.database.pooling.removeAbandoned=true
#设置被遗弃的连接的超时的时间（以秒数为单位），即当一个连接被遗弃的时间超过设置的时间，则它会自动转换成可利用的连接。默认的超时时间是300秒。
idatrix.database.pooling.removeAbandonedTimeout=60
#是否在自动回收超时连接的时候打印连接的超时错误
idatrix.database.pooling.logAbandoned=false
#给出一条简单的sql语句进行验证
idatrix.database.pooling.validationQuery=select 1 
#在取出连接时进行有效验证
idatrix.database.pooling.testOnBorrow=true

##=============================== Settings ==================================##
#上传文件最大200M
upload.file.max.size=209715200

# 元数据对接方式：
# Default（测试用） , iDatrix (对接平台MetaCube系统,必须开启dubbo,即 dubbo.deployment=true) , Pentaho（不对接，本地管理） , Tenant（对接第三方元数据系统）
metaCube.category=Pentaho

# 资源存储模式：
# Default（测试用）, Local（本地XML存储）, Cache（远程缓存，Redis）, Database（远程数据库，MySQL）
metaStore.category=Local

# 是否部署Web模块：
# false（不部署Web模块，只部署ETL服务）, true（部署CloudETL Web模块）
# 注意：Web模块只能部署在主服务器（master）上，而且平台内最多只在一台服务器上部署Web模块！！！
idatrix.web.deployment=true

# 平台是否部署了Trans-engine模块，如果为false，则屏蔽Trans-engine的执行入口
idatrix.trans.engine.deployment = false

#是否启用 订阅推送失败时自动重推 
idatrix.subcribe.push.fail.retry.enable=false

#订阅推送失败重推等待间隔,秒
idatrix.subcribe.push.fail.retry.interval=300

#获取调度/转换列表  当组名为空时 使用的默认组名 ,可选  default , all
idatrix.default.group.name=default

##============================= restart and breakpoint setting ================================##

# 是否启用 重启服务时重新启动运行中的trans/job机制
idatrix.restart.transjob=false

#断点续传是否可用
idatrix.breakpoint.resume.enable=false

# 断点缓存清理间隔时间(毫秒)
idatrix.breakpoint.cache.clean.time=200

# 转换异常确认的间隔时间,转换最后更新时间间隔大于此设置则确认为中断,需要重启,必须设置比idatrix.breakpoint.cache.clean.time大(秒)
idatrix.breakpoint.except.time=300

# 远程服务 断点扫描间隔时间(秒)
idatrix.breakpoint.remote.scan.time=60


##============================= Cloud Logger ================================##
# 用户操作日志输出级别:
# OFF, TRACE, DEBUG, INFO, WARN, ERROR
idatrix.logger.level=INFO

# 是否输出用户日志到控制台系统日志
# true（所有用户的日志都输出到系统日志中），false（用户日志只输出到自己的日志文件中）
idatrix.logger.additivity=false

#当设置用户日志不输出到系统日志时(idatrix.logger.additivity=false),错误等级的日志是否输出到系统日志
idatrix.logger.additivity.error=true

# Kettle日志级别（原生Kettle组件输出日志的级别）：
# 取值区分大小写："Nothing", "Error", "Minimal", "Basic", "Detailed", "Debug", "Rowlevel"
kettle.logger.level=Basic

#调度和转换执行历史记录存储方式 ,可选 database , xml (选用database ,idatrix.database.enable必须为true)
idatrix.exec.log.store=xml

#执行job时 ,循环日志分次保存(日志会比较多)
idatrix.job.log.segmenting.part=false

##============================ Metrics Monitor ==============================##
# 是否开启业务监控指标上报功能
idatrix.metrics.reporter=false

# 上报时间间隔，单位毫秒
idatrix.metrics.reporter.interval=60000


##============================ Analyzer Trigger =============================##
# 是否开启ETL流程分析器功能(必须开启dubbo,即 dubbo.deployment=true)
idatrix.analyzer.trigger=false

# 流程分析器启用等级
# 0 - 成功后启用（无错误），1 - 完成后启用（包括完成、有错误完成）
idatrix.analyzer.trigger.level=0


##=============================== Security ==================================##
# 是否部署Security模块，用于对接iDatrix UniSecurity系统：
# false（不部署Security模块）, true（部署Security模块）
idatrix.security.deployment=false

idatrix.security.serverBaseUrl=
idatrix.security.serverInnerAddress=
idatrix.security.projectName=/security
idatrix.security.notLoginOnFail=false
idatrix.security.name=SSOFilter


##================================ Dubbo ====================================##
# 是否部署Dubbo模块：
# false（不部署Dubbo模块，当metaCube.category=Pentaho时）, true（部署Dubbo模块，当metaCube.category=iDatrix时）
dubbo.deployment=false

#dubbo.spring.config=classpath:META-INF/spring/spring-metacube-service.xml
zookeeper.address=

dubbo.port=20999
dubbo.container=log4j,spring
dubbo.application.logger=log4j
dubbo.log4j.file=/var/log/cloudetl/dwh-agent.log
dubbo.log4j.level=INFO
dubbo.log4j.subdirectory=20880


##============================= Redis settings===============================##
#是否开启缓存功能
idatrix.redis.cache.enable=false

redis.host=10.0.0.84
redis.port=6379  
redis.pass=redis
redis.dbIndex=8 
# 0:永不超时
redis.expiration=0  
redis.maxIdle=300  
redis.maxActive=600  
redis.maxWait=1000  
redis.testOnBorrow=true


##==================== DB Connection Parameters Override=====================##
#是否用下面参数覆盖DB Connection（解决元数据不支持连接参数的问题）
db.parameter.override=true

# Properties
db.parameter.stream.results=true

# Extra options
db.parameter.defaultFetchSize=1000
db.parameter.useCursorFetch=true

##=================== 额外的系统配置=====================##
#判断字符串是 区分 null 和 '' 
KETTLE_EMPTY_STRING_DIFFERS_FROM_NULL=Y
#远程执行时返回的结果对象包含文件等复杂信息
KETTLE_COMPATIBILITY_SEND_RESULT_XML_WITH_FULL_STATUS=Y
#远程执行时返回的结果对象不包含Row数据
KETTLE_COMPATIBILITY_SEND_RESULT_XML_WITH_ROW=N


